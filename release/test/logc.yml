envs:
  dev:
    elasticsearch:
      - http://log-es.com/logc-dev-
    <<: *defaults
  demo:
    elasticsearch:
      - http://log-es.com/logc-demo-
    <<: *defaults
  qa:
    elasticsearch:
      - http://192.168.202.51:9200/logc-qa-
      - http://192.168.202.52:9200/logc-qa-
    <<: *defaults
  production:
    elasticsearch:
      - http://192.168.202.51:9200/logc-
      - http://192.168.202.52:9200/logc-
    <<: *defaults

defaults: &defaults
  name: test
  files:
    -
      # file path, required, either relative or absolute is ok.
      path: app.log

      # index can be time series index or regular index.
      # time series index, string between "<" and ">" acts as layout.
      # see https://golang.org/pkg/time/#Parse for layout format.
      # index doesn't contain "<" and ">" acts as a regular index.
      index: app-<2006.01.02>

      # the number of latest time series indices to keep. old indices will be deleted.
      # effective only when "index" field is a time series index.
      indexKeep: 3

      type: app-log
      mapping: *mapping
      timeField: at
      # layout to parse "timeField". (default: RFC3339)
      timeFormat: "2006-01-02T15:04:05-0700"
    - path: app.err
      index: app-<2006.01.02>
      type: app-err
      mapping: *mapping
      timeField: at
    - path: consume.log
      index: test-consume
      type: consume-log
      mapping: *mappingConsume
      timeField: at
  rotateTime: "33 8 1 * * *"
  rotateCmd:  [ logrotate, logrotate.conf ]
  batchSize: 1024
  # how long to wait to full fill batchSize
  batchWait: 1s
  mailer: mailer://smtp.qq.com:25/?user=小美<xiaomei-go@qq.com>&pass=zjsbosjlhgugechh
  keepers: [  ]

mapping: &mapping
  at: { type: date, format: "yyyy-MM-dd'T'HH:mm:ssZ" }
  duration: { type: float }
  host: { type: keyword }
  method: { type: keyword }
  path: { type: text }
  query: { type: text }
  status: { type: keyword }
  req_body: { type: integer }
  res_body: { type: integer }
  ip: { type: ip }
  refer: { type: text }
  agent: { type: text }
  proto: { type: keyword }
  # session: sess

mappingConsume: &mappingConsume
  at: { type: date, format: "yyyy-MM-dd'T'HH:mm:ssZ" }
  data: { type: object }
